from app import db
from app.models import Prediction, Incident, CensusTracts
from flask_sqlalchemy import SQLAlchemy
import geoalchemy2
import os
import datetime
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
from sqlalchemy import and_
from geoalchemy2.types import Geometry
from geoalchemy2.shape import from_shape, to_shape
from sqlalchemy import func

def findCenter(polygon):
    
    placeHolder = [1.0,2.0]
    return placeHolder

def runStats():
        curDT = datetime.datetime.now() 
        years = [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018]
        originLat = float(os.environ['LATORG'])
        originLong = float(os.environ['LONORG'])
        limitLat = float(os.environ['LATSTOP'])
        limitLong = float(os.environ['LONSTOP'])
        bbsize = float(os.environ['BBSIZE'])
        NSBoxes = ( originLat - limitLat ) / bbsize
        EWBoxes = ( originLong - limitLong ) / bbsize
        crimeCounts = []
        boxes = []
        Features, output = make_regression(n_features=3, n_informative=3,random_state=42, shuffle=True)
        crimeCounts = []
        areas = db.session.query(CensusTracts).all()
        #print(areas)
        learningData = []
        for area in areas:
                    for year in years:
                        box = "MULTIPOLYGON (((-87.6860799999848 41.82295600001154, -87.68606600004208 41.82301899996352, -87.68607699997101 41.82330899998973, -87.68608000004309 41.823383999978184, -87.6861219999606 41.82416099998552, -87.68612000002825 41.82419500000042, -87.68612999996847 41.824313999993066, -87.68614400001749 41.824351999992395, -87.68619700002532 41.82441900000564, -87.68628300001852 41.82450500000979, -87.68636200004383 41.824583000003834, -87.68666800001778 41.824886000026126, -87.68663399997084 41.824906000004155, -87.68653499995962 41.82496900000112, -87.68650200000407 41.82499000002694, -87.68647399999108 41.825007999964384, -87.68644000000148 41.82502800002192, -87.68632300002135 41.825098999964446, -87.68625299999883 41.82513999997636, -87.68622199997164 41.82515999999151, -87.68619099997863 41.82517799997264, -87.68619899996274 41.82525000000465, -87.68620999997933 41.825335999965226, -87.68620900002722 41.82546900001908, -87.68620900000036 41.825543000007556, -87.68638599996116 41.82558899996936, -87.68643800003015 41.82566300001098, -87.68655800003495 41.82583200002764, -87.68668399997969 41.82610199999048, -87.68680899997499 41.82635299997193, -87.68682499995931 41.826386000023824, -87.68688700001913 41.82650999996521, -87.68694500002681 41.82663299998837, -87.68703500003777 41.82683200001242, -87.68703800001047 41.82683700000944, -87.68713800001986 41.82709500001108, -87.68724199997718 41.82742999998399, -87.68724599997157 41.82745500001884, -87.68728599996709 41.82767099999873, -87.68728999996348 41.827817999973405, -87.68730200001626 41.828260999968116, -87.6873060000124 41.82840900000835, -87.68731499999448 41.82877399996329, -87.68734499999877 41.829871999992775, -87.68735500002224 41.83023800000085, -87.68735299998043 41.83041899998427, -87.68735000004482 41.83096500000058, -87.6873490000422 41.83114699997155, -87.68736000002603 41.83132399999354, -87.6873959999664 41.83185699996976, -87.68740800001777 41.832034999975825, -87.68741500000176 41.83255399998534, -87.68743900004314 41.834112000012595, -87.68744600004233 41.834509999978344, -87.68744900004587 41.83463199997605, -87.68695599999799 41.834785999971224, -87.68547899998134 41.835250000027585, -87.68532399999403 41.8352989999812, -87.68522300002583 41.83533300000235, -87.68498900002943 41.835410999972794, -87.6849049999625 41.83543800002396, -87.68465700003816 41.835521999998164, -87.68457399999693 41.83554999997655, -87.68370200000454 41.83584099997863, -87.68369400002233 41.835843999976156, -87.68261800002743 41.83617899999046, -87.68107000002207 41.836660999986435, -87.68105799997137 41.83666500000929, -87.68064600003912 41.83678800002368, -87.68039700000104 41.836846999974405, -87.68018199999892 41.83689300001372, -87.68000400003176 41.83693100002507, -87.67991099995578 41.83694699998484, -87.67952500003422 41.8370140000258, -87.6791090000066 41.837068000026385, -87.67909299995853 41.83706900001091, -87.67881800004514 41.83708799996978, -87.67867399995842 41.837098000015295, -87.67864399998419 41.83709799998866, -87.6781220000106 41.83711300001974, -87.6779490000141 41.83711899998241, -87.67783300000619 41.83712199997655, -87.67744700002744 41.83712799999387, -87.675942000018 41.8371539999835, -87.67544100002543 41.83716299996793, -87.6754410000445 41.83713299999375, -87.67544099999385 41.83711199997704, -87.6754409999913 41.83704799998537, -87.67543999996377 41.836963000011046, -87.67544000003386 41.836953999984566, -87.67543999996387 41.83691300002921, -87.67543899996764 41.836864999966096, -87.67543899997455 41.83681800001538, -87.67543899995552 41.8367229999647, -87.6754389999611 41.836676000012815, -87.67543700001109 41.83650900001605, -87.67543700003776 41.836446000028594, -87.67542400000208 41.83600999998814, -87.67542000002877 41.835843999984, -87.67541100001057 41.83547899998028, -87.67538499998048 41.834386999963705, -87.67537899996587 41.83413499998804, -87.67537600001502 41.834023000014746, -87.67536799998098 41.833780999997664, -87.67534699999607 41.83305499998641, -87.67534399997179 41.832923999982235, -87.67534299996328 41.8328500000029, -87.67534199995869 41.832830000016685, -87.67534199995946 41.832813000030036, -87.67534099997158 41.83271399997176, -87.67533999996364 41.832691000019615, -87.67533600002463 41.8324339999805, -87.67533200002448 41.83232800000731, -87.67532800001092 41.83220699999777, -87.67532500000671 41.83212899996333, -87.67531599996934 41.83189600000175, -87.67531400000517 41.83181900000902, -87.67531000003942 41.83171499997852, -87.67530699999658 41.8316059999911, -87.67530099998739 41.83140399998958, -87.67529799997575 41.83130099999721, -87.6752959999826 41.83122500000775, -87.67529300003999 41.83111799996601, -87.67528900002534 41.830858000026375, -87.67528300000595 41.83057199997566, -87.67528000000611 41.83039000000183, -87.67552399996521 41.83038700001883, -87.67589799998802 41.83038399997732, -87.67625600003689 41.830378999990955, -87.6765010000181 41.83037700002849, -87.6766400000078 41.830374999978346, -87.67674400004483 41.83037300002499, -87.67747599998303 41.83036599998452, -87.6777209999751 41.83036400002655, -87.67805600001205 41.8303600000285, -87.67870699996188 41.830352999970486, -87.67906200003173 41.83034900001578, -87.67918800002508 41.830348000025175, -87.67937500003852 41.83034599998195, -87.67939799997012 41.83034500001489, -87.67943599996828 41.83034499996605, -87.67950800002073 41.83034399996476, -87.67955399998317 41.830343999996984, -87.67968100000489 41.83034200000018, -87.67984100002468 41.83033999997787, -87.67995200002166 41.83033899997739, -87.67999400003107 41.83033799998274, -87.6801220000052 41.83033699998376, -87.68016499998807 41.830336999999446, -87.68040800004206 41.830334000007646, -87.68077599996013 41.830329999975525, -87.68113700004463 41.830324000021726, -87.68138000000933 41.830321000030914, -87.68162499996703 41.83031799996514, -87.6823610000366 41.830308999967706, -87.6826070000139 41.830306999987506, -87.68282999999663 41.830303999978014, -87.68315800002453 41.830302000019714, -87.68350100004338 41.83029799998978, -87.6837249999693 41.83029700001286, -87.68387100004139 41.8302949999954, -87.68431199998417 41.83029000001156, -87.68445899997609 41.830288999968836, -87.68445300004475 41.83008899997115, -87.68443499996833 41.82948900000222, -87.68442899996238 41.82928999998763, -87.68442399999654 41.82912399997969, -87.68440900003738 41.8286259999945, -87.68440499999332 41.82845999999024, -87.68439899998178 41.82822800001293, -87.6843820000332 41.82753500001695, -87.68438000003108 41.82741599999719, -87.6843789999735 41.82739200001687, -87.68437699996213 41.82730399996927, -87.68437400002729 41.82719800001481, -87.68437100003447 41.8270990000084, -87.6843550000226 41.82648700002862, -87.68435300000799 41.826404000030074, -87.68434900000618 41.82628399999413, -87.68432999998258 41.825626999964385, -87.68430399998653 41.8246990000317, -87.68428500004205 41.82398800000442, -87.68426599997429 41.82365599999356, -87.68426100004427 41.82355100000182, -87.68423999999979 41.822999999972446, -87.68435099999839 41.82299999996783, -87.68443199999739 41.82299999997831, -87.68467799999932 41.822998999992386, -87.68468400000319 41.82299799996993, -87.68479600002992 41.82299799996829, -87.68480500002917 41.822998000013634, -87.68483399999802 41.82299799997944, -87.68484400002832 41.8229979999733, -87.68489899996713 41.822993999972574, -87.68505799999254 41.82296900001356, -87.6854429999801 41.8229180000128, -87.6859570000401 41.822862999988665, -87.6860799999848 41.82295600001154)))"
                        #box = area.geom
                        #x = box.ST_X(box.ST_Centroid())
                        #y = box.ST_Y(box.ST_Centroid())
                        #x,y = to_shape(box.ST_Centroid()).coords[0]
                        #y,x =  func.st_y(box.ST_Centroid()), func.st_x(box.ST_Centroid())
                        print(func.ST_Centroid(box))
                        #y = box.coords[1]                      
                        #print(x)
                        result = db.session.query(Incident).filter(and_(Incident.location.contained(box))).count()
                        if result==0:
                            continue
                        #x,y = box.ST_Centroid()
                        print(x)
                        print(y)
                        learningData.append([x,y,year])     
                        crimeCounts.append([result])
                        print(learningData)
                        print(crimeCounts)



        # Run stats over the array, most likely just find max for normalization heat map
        #maxCrimes = max(crimeCounts)
        regr = RandomForestRegressor(max_depth=3, random_state=42)
        Features = np.array(learningData[:int(len(learningData)/2)])
        output = np.array(crimeCounts[:int(len(crimeCounts)/2)])
        testInput = np.array(learningData[int(len(learningData)/2):])
        testOutput = np.array(crimeCounts[int(len(crimeCounts)/2):])
        regr.fit(Features.reshape(1,-1), output.reshape(1,-1))
        print(regr.score(testInput.reshape(1,-1),testOutput.reshape(1,-1)))
        countIndex = 0
        for area in areas:
                    for year in years:
                        box = area.geom
                        x,y = box.ST_Centroid()
                        pred = Prediction()
                        predic = regr.predict([[x,y,year]])[0]
                        #print(predic)
                        pred.certainty = predic
                        pred.countIndex =  countIndex + 1
                        pred.type = 'general'
                        pred.precog = 'basic_ml'
                        pred.datetime = curDT
                        pred.location = "POINT( " + str(x) + " " + str(y) + " )"
                        db.session.add(pred)
#                       print("POINT( " + str(x) + " " + str(y) + " )")
#                       print(crimeCounts[countIndex] / maxCrimes)
                        countIndex = countIndex + 1
        db.session.commit()

runStats()
print("Stats pre cog finished running")
